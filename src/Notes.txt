# Running and compiling code
go run - Compiles and runs code at the same time.
go build - If you explicitly want to compile the code. (Will create an executable that you can run on your linux machine)

Example: go run main.go

# Printing 

println("Hello World") - Prints out a string to the console.

# Entry point of program

Just like C++ and Java Go has a function that will act as an entry point or a start
point for the application, this is in go a function called Main that has to be in the package Main

If you're making an application and running it with go run and have either not a package main or a 
func main you will face an error. If you use go build and either are missing the code will still compile
but the code will not run since there are not entry point for the application. This is popular when building
an api

Example:

package main

func main() {
	println("Main Function")
}

# Imports

You cannot get far without using Go's own libraries or even 3rd party libraries. 
In go we use the keyword import to import libraries we wish to use.
Go is strict when it comes to imports and will not run if you import a package and not use it. This is
something you will have to get used to.

Example:

import (
	"fmt"
	"os"
)

# Strings
len - returns the length of a string, number of values in a dictionary or the number of elements in a array.

# Variables
var power int - Declaring a variable together with the variable type int

Different ways you can initiate a variable:
var power int
power = 1000

var power1 int = 2000

power2 := 3000 - Also works with functions, Note that you can only do this once per variable since this is declaring and initiating
power2 := somefunc()

You can assing multiple variables at once:
name, power := "Goku", 9000

Just like imports Go wont let us compile with unused variables.
Go also supports "Pointers"


# Functions
func name() TYPE - declaring a simple function where "TYPE" is the return value
func name(message string) (int, string) - multiple return values

Calling functions like
_,testvar := name("Test Message") - For a return value we do not care about we can use '_' in this case that is the int value

# Structures

Go is not an Object Oriented language like C++ or Java.
It doesnt have Objects, nor Inheritance neither polymorphism and overloading.

Go uses structures which can be compared with Methods.
Structures are very close to classes.

type ourStruct struct {
	Name string
	Power int
}

We put our struct into a pointer like:
ourVar := ourStruct{
	Name: "Josh",
	Power: 5000
}
Or:
ourVar := ourStruct{Name: "Josh"}
ourVar.Power = 5000
Or:
ourVar := ourStruct{"Josh", 5000}

Pointers are a memory adress, the location of where to find the actual value.
Its different of having the location of the house instead of the house.
&variable = the memory adress
*TYPE = A pointer of the type, example: *int - Takes a integer adress.

How to make a poiter:

ourValue := &ourStruct{value, value, value} - The actual variable, using the & (Address of) operator.

func ourFunc(aPointer *ourStruct) - The function that takes in a pointer and will be able to change the variable within the function. The * operator here means "Pointer to value of type X" in this case x = ourStruct

We can bind a function to a struct by doing simply:

type ourStruct struct {
	...
}

func (s *ourStruct) boundFunc() {
	
}

Here we are saying that type *ourStruct is the reciever of the boundFunc method, we can call it like this:
testVar := &ourStruct{..}
testVar.boundFunc()


# Constructors
Constructors can be created through either new(Person) or through an factory function that returns a new value
of the struct.

# Composition
A struct can have any types within it. Composition reminds of Inherritance

type Person struct{
	Name string
}

func (p *Person) Introduce(){
	fmt.Println("Hello", p.Name)
}

type Superman struct{
	*Person
	Power int
}

strangeGuy := &Superman{
	Person: &Person{"IronMan"},
	Power: 3534,
}

strangeGuy.Introduce() //This works even strangeGuy is a type of Superman but it can use the functions of the included Person struct. The Superman structure have a field of the type *Person because we didnt give it an explicit field name we can access the fields and functions of the composed type. Go did under the hood give it a field name so consider both valid:

fmt.Println(strangeGuy.Name)
fmt.Println(strangeGuy.Person.Name)

# Overloading 
Go does not support overloading thats why you will see yourself writing alot of functions like
Load, LoadById, LoadByName and so on.
However because Composition is just a trick we can "overwrite" struct bound functions.
For example if Person has like above a Introduce() function we could extend the above code with

func (s *Superman) Introduce(){
	fmt.Println("Hello", s.Name)
}

The old Introduce will still be available through 
s.Person.Introduce()

# Pointer vs Values
Should this be a value or a pointer to a value?
First of all if you are not sure then use a Pointer,

Values are a good way to pass data which is Immutable(Changes made inside the function wont affect the rest of the code) sometimes that will be the feature you're looking for but more often you will want to use Pointers.

# Arrays
Arrays are not like you're used to in PHP for example where they are dynamic. In Go arrays are static and has to have a specified value.

Example:
var scores [10]int
scores[0] = 123

You can use the keyword "len" to get the length of an array or the keyword range to itterate over it:
for index, value := range scores {
	
}

Arrays are efficient but oftean we do not knowthe exact ammount of values we want to store within the array.
For that we turn to slices.

# Slices
In Go slices are more popular than arrays. 
Example of how to create a slice:

scores := []int{1, 4 ,1123, 50}

You can also use the keyword make to create a slice, You could also do it with the new keyword but the new keyword is for allicating memory and there is more to creating slices than that.

Make syntax: make(TYPE, length, capacity)
scores := make([]int, 10)
This will create a slice with the length of 10 and the capacity of 10.

Note to take is that the length function is overloaded inside the 2nd parameter of make.

There are four common ways to initialize a slice
names:= []string{"Leto", "John"}
checks := make([]bool, 10)
var names []string
scores := make([]int, 0, 10)

The first one could be used when you know the values

The second one could be used when you will be writing into specific indexes of a slice,
for example if you would be itterating over another array you could in this case switch 10 to len(target)

The Third could be used with append when the number of elements are unknown.

Lastly the fourth usefull is we have a general idea of how big slice we will need.

With slices we have to remember that we will use [:] alot where
[X:] = From X to the end
[:X] = From start to X

# Maps
Maps in Go are what other languages call Hashes or dictionaries.
